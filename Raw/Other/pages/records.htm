<script type="text/javascript">
	"use strict";

	var instanceTypes;
	var instances;
	var paths;
	var professions;
	var records;
	var groups;
	var players;
	var columnOder = ["time", "date", "group", "characters", "build", "validity", "category"];

	var page = "";
	var dontReadRecords = true;
	$(document).ready(function() {
		loadSettings(false, false);
		generateSubNavigation(["Records", "Rules", "Guilds", "Players"], ["Records", "Rules", "Guilds", "Players"]);
		loadPage();
		$("#record-date-pre").datepicker({dateFormat: "yy/mm/dd"});
		$("#record-date-after").datepicker({dateFormat: "yy/mm/dd"});

		$("#record-instance-type").change(function () {
            updateInstanceSelect();
        });
		$("#record-instance").change(function () {
			updatePathSelect();
        });
		// Validity setting affects which paths show up.
		$("#record-validity").change(function () {
            updatePathSelect();
        });
		$(".record-changer").change(function () {
            readRecords();
			storeFilters();
        });
		$(".column-changer").click(function (e) {
			// Prevent default bootstrap behavior.
			e.stopPropagation();
			$(this).toggleClass('active');
			$(this).blur();
			updateRecordTable();
			storeFilters();
        });
		// Show guild and player selector only on the profile pages.
		page = window.location.pathname.split("/");
		page = page[page.length - 1];
		if (page != "Guilds")
			$("#record-group").hide();
		if (page != "Players")
			$("#record-player").hide();
		exec("readData", "&page=" + page);
	});
	
	function saveDefaultFilters() {
		var filters = getHash(0);
		// If filters haven't been changed then there is nothing to change.
		if (filters == "")
			return;
		saveSetting("defaultFilters", filters);
	}
		
	function readRecords() {
		// Prevent unnecessary reading while loading filters.
		if (dontReadRecords)
			return;
		var selectedPath = $("#record-path").val();
		var selectedProfession = $("#record-profession").val();
		var selectedCategory = $("#record-category").val();
		var selectedValidity =  $("#record-validity").val();
		var selectedDatePre = $("#record-date-pre").val();
		var selectedDateAfter = $("#record-date-after").val();
		// Convert date to sql format.
		if (selectedDatePre != "")
		{
			selectedDatePre = dateToSQL(selectedDatePre);
			if (selectedDatePre == "")
			{
				$("#messages").html("Incorrect date format.");
				return;
			}
		}
		// Convert date to sql format.
		if (selectedDateAfter != "")
		{
			selectedDateAfter = dateToSQL(selectedDateAfter);
			if (selectedDateAfter == "")
			{
				$("#messages").html("Incorrect date format.");
				return;
			}
		}
		// Show one path or all paths depending on path selection.
		var pathIDs = '';
		if (selectedPath == 0) {
			var first = true;
			$.each(paths, function() {
				if (first)
					first = false;
				else
					pathIDs += "|";
				pathIDs += this.ID;
			});
		}
		else {
			pathIDs = selectedPath;
		}
		var amount = 0;
		if ($("#record-layout").val() == 3)
			amount = 50;
		// Force top record for rankings.
		if ((page == "Guilds" && $("#record-group").val() == 0)
			|| (page == "Players" && $("#record-player").val() == 0))
			amount = 0;
		exec("records", "&paths=" + pathIDs + "&profession=" + selectedProfession + "&category=" + selectedCategory + "&validity=" + selectedValidity +
					"&amount=" + amount + "&date1=" + selectedDatePre + "&date2=" + selectedDateAfter + 
					"&instance=" + $("#record-instance").val() + "&instanceType=" + $("#record-instance-type").val() + "&path=" + $("#record-path").val() +
					"&group=" + $("#record-group").val() + "&player=" + $("#record-player").val());
	}

	function exec(type, params) {
		var request = $.ajax({
			url: "records.php",
			type: "post",
			data: "type=" + type + params
		});
		request.done(function (data){
			data = JSON.parse(data);
			if (data.success)
			{
				if (type == "readData")
				{
					updateProfessionSelect(data.professions);
					updateCategorySelect(data.categories);
					// Store to variables because path select updates based on instance select selection.
					paths = data.paths;
					instances = data.instances;
					instanceTypes = data.instanceTypes;
					professions = data.professions;
					updateInstanceTypeSelect(data.instanceTypes);
					groups = data.groups;
					updateGroupSelect();
					players = data.players;
					updatePlayerSelect();
					// Get filter settings (if given).
					var filters = getHash(0);
					if (filters == "")
						filters = getSetting("defaultFilters");
					if (filters != "")
						readFilters(filters);
					dontReadRecords = false;
					readRecords();
				}
				else if (type == "records")
				{
					records = data.records;
					if (page == "Guilds" && $("#record-group").val() == 0)
						createGuildRankings();
					else if (page == "Players" && $("#record-player").val() == 0)
						createPlayerRankings();
					else
					{
						updateRecordTable();
						if (page == "Guilds")
							updateGroupTable(data.players);
						else if (page == "Players")
							updatePlayerTable(data.characters, data.groups);
					}			
				}				
			}
			else
				console.log(data.message);
		});
		request.fail(function (data){
			data = JSON.parse(data);
			console.log(data.message);
		});
	}
	
	function updateProfessionSelect(professions) {
		var content = "<option value=0>Any</option>";
		$.each(professions, function() {
			content += "<option value=\"" + this.ID + "\">" + this.name + "</option>";
		});
		$("#record-profession").html(content);
	}
		
	function updateCategorySelect(categories) {
		// Create the listview.
		var content = "";
		$.each(categories, function() {
			content += "<option value=\"" + this.ID + "\">" + this.name + "</option>";
		});
		$("#record-category").html(content);
	}
	
	function updateInstanceTypeSelect(instanceTypes) {
		var content = '<option value="0">Both</option>';
		$.each(instanceTypes, function() {
			content += "<option value=\"" + this.ID + "\">" + this.name + "</option>";
		});
		$("#record-instance-type").html(content);
		updateInstanceSelect();
	}
	
	function updateInstanceSelect(typeID) {
		var typeID = $("#record-instance-type").val();
		var content = "<option value=0>All</option>";
		$.each(instances, function() {
			if (typeID > 0 && this.type != typeID)
				return;
			content += "<option value=\"" + this.ID + "\">" + this.name + "</option>";
		});
		$("#record-instance").html(content);
		updatePathSelect();
	}
	
	function updateGroupSelect() {
		var content = '<option value="0">Select a guild</option>';
		if (groups) {
			$.each(groups, function() {
				if (this.tag == "[]")
					return;
				content += '<option value="' + this.ID + '">' + this.name + ' ' + this.tag + '</option>';
			});
		}
		$("#record-group").html(content);
		if (!groups)
			return;
		// Select a group automatically if given.
		var filter = getHash(1);
		if (filter == "")
			return;
		filter = filter.replace(/_/g, ' ');
		// Find a matching group.
		$.each(groups, function() {
			if (filter == "")
				return;
			if (this.tag == "[]")
				return;
			var name = this.name + ' ' + this.tag;
			if (name.indexOf(filter) != -1) {
				$("#record-group").val(this.ID);
				filter = "";
			}	
		});
	}
	
	function updatePlayerSelect() {
		var content = '<option value="0">Select a player</option>';
		if (players) {
			$.each(players, function() {
				if (this.name.indexOf("Unknown") == 0)
					return;
				content += '<option value="' + this.ID + '">' + this.name + '</option>';
			});
		}
		$("#record-player").html(content);
		if (!players)
			return;
		// Select a player automatically if given.
		var filter = getHash(1);
		if (filter == "")
			return;
		filter = filter.replace(/_/g, ' ');
		// Find a matching player.
		$.each(players, function() {
			if (filter == "")
				return;
			if (this.name.indexOf("Unknown") == 0)
				return;
			if (this.name.indexOf(filter) != -1) {
				$("#record-player").val(this.ID);
				filter = "";
			}	
		});
	}
	
	function updatePathSelect(instanceID) {
		var instanceID = $("#record-instance").val();
		var content = "<option value=0>All</option>";
		var validity = $("#record-validity").val();
		$.each(paths, function() {
			if (this.instance != instanceID)
				return;
			// Don't show old paths if not needed.
			if (validity == 1 && this.validity == 0)
				return;
			content += "<option value=\"" + this.ID + "\">" + this.name + "</option>";
		});
		$("#record-path").html(content);
		readRecords();
	}
		
	function updateRecordTable() {
		var layout = $("#record-layout").val();
		// Use different functions even with quite similar code to keep them simple.
		if (layout == 0)
			createRowView(1);
		else if (layout == 1)
			createRowView(2);
		else if (layout == 2)
			createListView();
		else if (layout == 3)
			createListView2();
		handleOverlayLinks();
    }
	
	function createRowView(columnsMax) {
		var columns = 1;
		// Create table header.
		var header = '<table class="table table-striped table-bordered table-condensed"><thead><tr>';
		// Check which columns to display.
        header += '<td>Path</td>';
		$.each(columnOder, function() {
			if ($("#column-" + this).hasClass('active'))
				header += "<td>" + $("#column-" + this).html() + "</td>";
		});
        header += '</tr></thead><tbody>';
		var validity = $("#record-validity").val();
		var content = "";
		var typeID = $("#record-instance-type").val();
		var instanceFilter = $("#record-instance").val();
		var category = $("#record-category").val();
		// Don't show paths with too many minimum players.
		var maxPlayers = 5;
		if (category > 2)
			maxPlayers = category - 2;
		$.each(instances, function() {
			// Don't show empty stuff with guilds or players.
			if (!records || ((page == "Guilds" || page == "Players") && records.length == 0))
				return;
			if (typeID > 0 && this.type != typeID)
				return;
			if (instanceFilter > 0 && this.ID != instanceFilter)
				return;
			// Add a new row if needed.
			if (columns == 1)
			{
				columns = columnsMax;
				content += '<div class="row">';
			}
			else
			{
				columns--;
			}
			// Add a column.
			content += '<div class="col-lg-' + (12 / columnsMax) + ' col-md-12"><div style="text-align: center;"><h2>';
			if (this.image.length > 0)
				content += '<img src="media/img/' + this.image + '" alt=""/>';
			content += this.name + '</h2></div>';
			// Add paths.
            content += header;
			
			var instanceID = this.ID;
			var pathFilter = $("#record-path").val();
			$.each(paths, function() {
				if (this.instance != instanceID)
					return;
				if (pathFilter > 0 && this.ID != pathFilter)
					return;
				if (this.minPlayers > maxPlayers)
					return;
				// Don't show old paths if not needed.
				if (validity == 1 && this.validity == 0)
					return;
				var timeStr = ""
				var groupStr = "";
				var characterStr = "";
				var dateStr = "";
				var buildStr = "";
				var validityStr = "";
				var categoryStr = "";
				// Build data strings.
				if (records[this.ID]) {
					timeStr = buildTimeStr(records[this.ID].time, records[this.ID].topiclink);
					groupStr = buildGroupStr(records[this.ID].groups);
					characterStr = buildCharacterStr(records[this.ID].characters, professions);
					dateStr = SQLToDate(records[this.ID].date);
					buildStr = records[this.ID].build;
					validityStr = records[this.ID].validity == 1 ? "Current" : "All time";
					categoryStr = records[this.ID].category;
				}	
				// Check which data to display.
				content +='<tr>';
				content += '<td>' + this.name.replace(/ /g, '&nbsp;'); + '</td>';
				$.each(columnOder, function() {
					if ($("#column-" + this).hasClass('active')) {
						// Brute force variable check. At least it's safe.
						if (this == "time")
							content += '<td>' + timeStr + '</td>';
						else if (this == "date")
							content += '<td>' + dateStr + '</td>';
						else if (this == "group")
							content += '<td>' + groupStr + '</td>';
						else if (this == "characters")
							content += '<td>' + characterStr + '</td>';
						else if (this == "build")
							content += '<td>' + buildStr + '</td>';
						else if (this == "validity")
							content += '<td>' + validityStr + '</td>';
						else if (this == "category")
							content += '<td>' + categoryStr + '</td>';
					}
						
				});
                content += '</tr>';	
			});
			content +='</tbody></table></div>';
			// End the row.
			if (columns == 1)
    			content += '</div>';
    
		});
		// End partial row.
		if (columns < columnsMax)
			content += '</div>';
		$("#record-table").html(content);
		resizeTables();
	}
	
	function createListView() {
		// Create table header.
		var content = '<table class="table table-striped table-bordered"><thead><tr>';
		// Check which columns to display.
        content += '<td>Path</td>';
		$.each(columnOder, function() {
			if ($("#column-" + this).hasClass('active'))
				content += "<td>" + $("#column-" + this).html() + "</td>";
		});
        content += '</tr></thead><tbody>';
		var validity = $("#record-validity").val();
		var typeID = $("#record-instance-type").val();
		var instanceFilter = $("#record-instance").val();
		var category = $("#record-category").val();
		var maxPlayers = 5;
		if (category > 2)
			maxPlayers = category - 2;
		$.each(instances, function() {
			if (typeID > 0 && this.type != typeID)
				return;
			if (instanceFilter > 0 && this.ID != instanceFilter)
				return;
			var instanceID = this.ID;
			var pathFilter = $("#record-path").val();
			$.each(paths, function() {
				if (this.instance != instanceID)
					return;
				if (this.minPlayers > maxPlayers)
					return;
				if (pathFilter > 0 && this.ID != pathFilter)
					return;
				// Don't show old paths if not needed.
				if (validity == 1 && this.validity == 0)
					return;
				var timeStr = ""
				var groupStr = "";
				var characterStr = "";
				var dateStr = "";
				var buildStr = "";
				var validityStr = "";
				var categoryStr = "";
				// Build data strings.
				if (records[this.ID]) {
					timeStr = buildTimeStr(records[this.ID].time, records[this.ID].topiclink);
					groupStr = buildGroupStr(records[this.ID].groups);
					characterStr = buildCharacterStr(records[this.ID].characters, professions);
					dateStr = SQLToDate(records[this.ID].date);
					buildStr = records[this.ID].build;
					validityStr = records[this.ID].validity == 1 ? "Current" : "All time";
					categoryStr = records[this.ID].category;
				}	
				// Check which data to display.
				content +='<tr>';
				content += '<td>' + buildPathStr(this.ID, paths, instances) + '</td>';
				$.each(columnOder, function() {
					if ($("#column-" + this).hasClass('active')) {
						// Brute force variable check. At least it's safe.
						if (this == "time")
							content += '<td>' + timeStr + '</td>';
						else if (this == "date")
							content += '<td>' + dateStr + '</td>';
						else if (this == "group")
							content += '<td>' + groupStr + '</td>';
						else if (this == "characters")
							content += '<td>' + characterStr + '</td>';
						else if (this == "build")
							content += '<td>' + buildStr + '</td>';
						else if (this == "validity")
							content += '<td>' + validityStr + '</td>';
						else if (this == "category")
							content += '<td>' + categoryStr + '</td>';
					}
						
				});
                content += '</tr>';	
			});
    
		});
		content +='</tbody></table></div>';
		$("#record-table").html(content);
	}
	
	function createListView2() {
		// Create table header.
		var content = '<table class="table table-striped table-bordered"><thead><tr>';
		// Check which columns to display.
        content += '<td>Path</td>';
		$.each(columnOder, function() {
			if ($("#column-" + this).hasClass('active'))
				content += "<td>" + $("#column-" + this).html() + "</td>";
		});
        content += '</tr></thead><tbody>';
		// All data should have already been filtered on the server side to have right amount of data.
		$.each(records, function() {
			// Build data strings.
			var timeStr = buildTimeStr(this.time, this.topiclink);
			var groupStr = buildGroupStr(this.groups);
			var	characterStr = buildCharacterStr(this.characters, professions);
			var	dateStr = SQLToDate(this.date);
			var	buildStr = this.build;
			var	validityStr = this.validity == 1 ? "Current" : "All time";
			var	categoryStr = this.category;
			// Check which data to display.
			content +='<tr>';
			content += '<td>' + buildPathStr(this.path, paths, instances) + '</td>';
			$.each(columnOder, function() {
				if ($("#column-" + this).hasClass('active')) {
					// Brute force variable check. At least it's safe.
					if (this == "time")
						content += '<td>' + timeStr + '</td>';
					else if (this == "date")
						content += '<td>' + dateStr + '</td>';
					else if (this == "group")
						content += '<td>' + groupStr + '</td>';
					else if (this == "characters")
						content += '<td>' + characterStr + '</td>';
					else if (this == "build")
						content += '<td>' + buildStr + '</td>';
					else if (this == "validity")
						content += '<td>' + validityStr + '</td>';
					else if (this == "category")
						content += '<td>' + categoryStr + '</td>';
				}
			});
           content += '</tr>';	
		});
		content +='</tbody></table></div>';
		$("#record-table").html(content);
	}
	
	function updateGroupTable(players) {
		// Basic group info.
		// Find the group.
		var groupID = $("#record-group").val();
		if (groupID == 0)
			return;
		var content = '<h2>';
		$.each(groups, function() {
			if (this.ID != groupID)
				return;
			if (this.website != "")
				content += '<a href="' + this.website + '">'
			content += this.name + ' ' + this.tag;
			if (this.website != "")
				content += '</a>';
		});
		content += '</h2>';
		// Player data.
		content += '<h3>Players</h3>';
		if (players.length > 0) {
			content += '<table class=\"table table-striped\"><tbody>';
			$.each(players, function() {
				if (this.name.indexOf("Unknown") == 0 && this.characters.length == 0)
					return;
				content += "<tr>";
				// Add link to player profile.
				content += '<td><a href="Players#' + getHash(0) + '#' + this.name + '">' + this.name + '</a></td>';
				content += "<td>" + buildCharacterStr(this.characters, professions) + "</td>";
				content += "</tr>";
			});
			content += "</tbody></table>";
		}
		$("#info-table").html(content);
		// Update url.
		var parts = $('#record-group option:selected').text().split(" ");
		// Last part is the tag.
		setHash(parts[parts.length - 1], 1);
	}
	
	function updatePlayerTable(characters, groups) {
		// Basic player info.
		// Find the player.
		var playerID = $("#record-player").val();
		if (playerID == 0)
			return;
		var content = '<h2>';
		$.each(players, function() {
			if (this.ID != playerID)
				return;
			content += this.name;
		});
		content += '</h2>';
		// Player data.
		if (characters.length > 0) {
			content += '<h3>Characters</h3>';
			content += '<table class=\"table table-striped\"><tbody>';
			$.each(characters, function() {
				content += "<tr>";
				content += "<td>" + buildCharacterStr([this], professions) + "</td>";
				content += "</tr>";
			});
			content += "</tbody></table>";
		}
		// Guild data.
		if (groups.length > 0) {
			content += '<h3>Guilds</h3>';
			content += '<table class=\"table table-striped\"><tbody>';
			$.each(groups, function() {
				content += "<tr>";
				content += '<td><a href="Guilds#' + getHash(0) + '#' + this.tag + '">' + this.name + ' ' + this.tag + '</a></td>';
				content += "</tr>";
			});
			content += "</tbody></table>";
		}
		$("#info-table").html(content);
		// Update url.
		var text = $('#record-player option:selected').text().replace(/ /g, '_');
		setHash(text, 1);
	}
	
	function createGuildRankings() {
		// Generate guild rankings.
		var groupRanks = [];
		if (!records)
			return;
		$.each(records, function() {
			for (var i = 0; i < this.groups.length; i++) {
				var index = groupRanks.map(function(e) { return e.name; }).indexOf(this.groups[i].name);
				if (index == -1)
					groupRanks.push({ name: this.groups[i].name, tag: this.groups[i].tag, points: this.characters.length / this.groups.length });
				else 
					groupRanks[index].points += this.characters.length / this.groups.length;	
			}	
		});
		// Sort by points.
		groupRanks.sort(function(a,b) {return b.points - a.points;} );
		// Create table header.
		var content = '<table class="table table-striped table-bordered"><thead><tr>';
        content += '<td>Rank</td><td>Guild</td><td>Points</td></tr></thead><tbody>';
		for (var i = 0; i < groupRanks.length; i++) {
			content +='<tr><td>';
			// Check for ties.
			if (i == 0 || groupRanks[i - 1].points > groupRanks[i].points)
				content += (i + 1);
			content += '</td><td>' + groupRanks[i].name + ' ' + groupRanks[i].tag + '</td>';
			content += '<td>' + groupRanks[i].points + '</td>';
			content += '</tr>';	
		}
		content +='</tbody></table></div>';
		$("#record-table").html(content);
		resizeTables();
	}
	
	function createPlayerRankings() {
		// Generate player rankings.
		var playersRanks = [];
		if (!records)
			return;
		$.each(records, function() {
			for (var i = 0; i < this.characters.length; i++) {
				var index = playersRanks.map(function(e) { return e.id; }).indexOf(this.characters[i].player);
				if (index == -1)
					playersRanks.push({ id: this.characters[i].player, points: this.characters.length / this.groups.length });
				else
					playersRanks[index].points += this.characters.length / this.groups.length;	
			}	
		});
		// Sort by points.
		playersRanks.sort(function(a,b) {return b.points - a.points;} );
		// Create table header.
		var content = '<table class="table table-striped table-bordered"><thead><tr>';
        content += '<td>Rank</td><td>Player</td><td>Guilds</td><td>Points</td></tr></thead><tbody>';
		for (var i = 0; i < playersRanks.length; i++) {
			content +='<tr><td>';
			// Check for ties.
			if (i == 0 || playersRanks[i - 1].points > playersRanks[i].points)
				content += (i + 1);
			content += '</td>';
			// Find the player name (player data already acquired for the player dropdown).
			var index = players.map(function(e) { return e.ID; }).indexOf(playersRanks[i].id);
			content += '<td>' + players[index].name + '</td>';
			content += '<td>' + buildGroupStr(players[index].groups) + '</td>';
			content += '<td>' + playersRanks[i].points + '</td>';
			content += '</tr>';	
		}
		content +='</tbody></table></div>';
		$("#record-table").html(content);
		resizeTables();
	}
	
	function resizeTables()
	{
		var tableArr = document.getElementsByTagName('table');
		var cellWidths = new Array();

		// get widest
		for(var i = 0; i < tableArr.length; i++)
		{
			for(var j = 0; j < tableArr[i].rows[0].cells.length; j++)
			{
			   var cell = tableArr[i].rows[0].cells[j];

			   if(!cellWidths[j] || cellWidths[j] < cell.clientWidth)
					cellWidths[j] = cell.clientWidth;
			}
		}

		// set all columns to the widest width found
		for(var i = 0; i < tableArr.length; i++)
		{
			for(var j = 0; j < tableArr[i].rows[0].cells.length; j++)
			{
				tableArr[i].rows[0].cells[j].style.width = cellWidths[j]+'px';
			}
		}
	}


</script>
<div class="container-fluid">
	<ul class="list-inline">
		<li>
			<label class="filter-text" for="record-instance-type">Type</label>
			<br>
			<select id="record-instance-type" class="record-changer form-control">
			</select>
		</li>
		<li>
			<label class="filter-text"  for="record-instance">Instance</label>
			<br>
			<select id="record-instance" class="record-changer form-control">
			</select>
		</li>
		<li>
			<label class="filter-text"  for="record-path">Path</label>
			<br>
			<select id="record-path" class="record-changer form-control">
			</select>
		</li>
		<li>
			<label class="filter-text"  for="record-profession">Profession</label>
			<br>
			<select id="record-profession" class="record-changer form-control">
			</select>
		</li>
		<li>
			<label class="filter-text"  for="record-category">Category</label>
			<br>
			<select id="record-category" class="record-changer form-control">
			</select>
		</li>
		<li>
			<label class="filter-text"  for="record-validity">Validity</label>
			<br>
			<select id="record-validity" class="record-changer form-control">
				<option value="1">Only valid</option>
				<option value="0">All time</option>
			</select>
		</li>
		<li>
			<label class="filter-text"  for="record-date-pre">After date</label>
			<br>
			<input id="record-date-pre" type="text" class="record-changer form-control">
		</li>
		<li>
			<label class="filter-text"  for="record-date-after">Before date</label>
			<br>
			<input id="record-date-after" type="text" class="record-changer form-control">
		</li>
		<li>
			<label class="filter-text"  for="record-layout">Layout</label>
			<br>
			<select id="record-layout" class="record-changer form-control">
				<option value="0">Group view: 1 row</option>
				<option value="1">Group view: 2 rows</option>
				<option value="2">List view: Best records</option>
				<option value="3">List view: Recent records</option>
			</select>
		</li>
	</ul>
	<div class="btn-group">
		<button id="column-time" class="btn btn-default column-changer">Time</button>
		<button id="column-date" class="btn btn-default column-changer">Date</button>
		<button id="column-group" class="btn btn-default column-changer">Guild</button>
		<button id="column-characters" class="btn btn-default column-changer">Characters</button>
		<button id="column-build" class="btn btn-default column-changer">Build</button>
		<button id="column-validity" class="btn btn-default column-changer">Validity</button>
		<button id="column-category" class="btn btn-default column-changer">Category</button>
	</div>
	<button type="button" class="btn btn-primary" onclick="saveDefaultFilters()">Save filters</button>
	<br><br>
	<select id="record-group" class="record-changer form-control" style="max-width:300px;">
	</select>
	<select id="record-player" class="record-changer form-control" style="max-width:300px;">
	</select>

	<br>
	<div id="info-table">
	</div>
	<br>
	<div id="record-table">
	</div>
</div>