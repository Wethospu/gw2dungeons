<script type="text/javascript">
	"use strict";
	// Some settings automatically cause a new search when they are changed. / 2015-10-18 / Wethospu
	// This prevents above if a search hasn't been done. / 2015-10-18 / Wethospu
	var searchDone = false;
	
    $(document).ready(function () {
		loadSettings(false, false);
		// Initialize tag plugin. / 2015-10-18 / Wethospu
		$('#tag-display').tagsinput({
			itemValue: 'value',
			itemText: 'text',
			tagClass: function(item) {
				switch (item.type) {
					case 'tag'   : return 'label label-primary';
					case 'rank'  : return 'label label-danger label-important';
					case 'dungeon': return 'label label-success';
					//case 'Africa'   : return 'label label-default';
					case 'race'     : return 'label label-warning';
				}
			}
		});
		// Prevent users from directly creating tags. / 2015-10-18 / Wethospu
		$('.bootstrap-tagsinput input').attr("readonly", true);
		// Add a new tag when one is selected. / 2015-10-18 / Wethospu
		$(".search-changer").change(function () {
			var type = $(this).attr("data-type");
			var value = $(this).val();
			var text = $("option:selected", this).text()
            $('#tag-display').tagsinput('add', { text: text, value: value, type: type });
			// Restore <select> to its original state. / 2015-10-18 / Wethospu
			$(this).val("");
			storeSearchValues();
        });
		// Change how results are shown. / 2015-10-18 / Wethospu
		$('#search-view').change(function () {
			saveSetting("searchView", $(this).val());
			// Automatically select previously used search amount value. / 2015-10-18 / Wethospu
			$('#search-amount').val(getSetting("searchAmount" + $(this).val()));
			storeSearchValues();
			if (searchDone)
				doSearch();
        });
		// Change how many results are shown. / 2015-10-18 / Wethospu
		$('#search-amount').change(function () {
            saveSetting("searchAmount" + $('#search-view').val(), $(this).val());
			if (searchDone)
				doSearch();
        });
		$("#search-name").on('input', function () {
			storeSearchValues();
		});
		$('#tag-display').on('itemRemoved', function() {
			storeSearchValues();
		});
		// Initialize search values from settings. / 2015-10-18 / Wethospu
		$('#search-view').val(getSetting("searchView"));
		$('#search-amount').val(getSetting("searchAmount" + $("#search-view").val()));
		// Initialize search values from the address bar. / 2015-10-18 / Wethospu
		var hashArr = getHashArray();
        if (hashArr.length > 0 && hashArr[0] != "")
            $("#search-name").val(hashArr[0].replace(/\+/g, ' '));
		if (hashArr.length > 1 && hashArr[1] != "")
			readTags(hashArr[1], '#search-path');
		if (hashArr.length > 2 && hashArr[2] != "")
			readTags(hashArr[2], '#search-rank');
		if (hashArr.length > 3 && hashArr[3] != "")
			readTags(hashArr[3], '#search-race');
		if (hashArr.length > 4 && hashArr[4] != "") {
			for (var i = 0; i < hashArr[4].length; i++) {
				var tag = hashArr[4][i];
				var name = '';
				$('#search-tag option').each(function(){
					if ($(this).val() == tag)
						name = $(this).text();
				});
				$('#search-tag-effect option').each(function(){
					if ($(this).val() == tag)
						name = $(this).text();
				});
				$('#tag-display').tagsinput('add', { text: name, value: tag, type: 'tag' });
			}
		}
		if (hashArr.length > 5 && hashArr[5] != "")
			$("#search-view").prop('selectedIndex', hashArr[5] - 1);
			
		if (hashArr.length > 0) {
			doSearch();
			// Search doesn't block the site from loading so don't add any code below.
		}
    });

// Loads stored tag elements for a single select. / 2015-10-18 / Wethospu
function readTags(hash, element) {
	// Convert has to select indexes. / 2015-10-18 / Wethospu
	var amount = $(element + ' option').length - 1;
	var maxValues = [];
	for (var i = 0; i < amount; i++)
		maxValues.push(amount + 1);
	var IDs = readValuesFromString(hash, maxValues);
	// Create a tag element for each. / 2015-10-18 / Wethospu
	for (var i = 0; i < IDs.length; i++) {
		if (IDs[i] == 0)
			continue;
		$('#tag-display').tagsinput('add', { text: $(element + ' option').eq(IDs[i]).text(), value: $(element + ' option').eq(IDs[i]).val(), type: $(element).attr('data-type') });
	}		
}

// Saves selected tags to the address bar. / 2015-10-18 / Wethospu
function storeSearchValues() {
	// Get selected tags. / 2015-10-18 / Wethospu
	var tagArray = $("#tag-display").tagsinput('items');
	var dungeons = [];
	var races = [];
	var ranks = [];
	var tags = [];
	// Separate them based on the type. / 2015-10-18 / Wethospu
	for (var i = 0; i < tagArray.length; i++) {
		if (tagArray[i].type == "dungeon")
			dungeons.push(tagArray[i].value);
		else if (tagArray[i].type == "race")
			races.push(tagArray[i].value);
		else if (tagArray[i].type == "rank")
			ranks.push(tagArray[i].value);
		else if (tagArray[i].type == "tag")
			tags.push(tagArray[i].value);
	}
	// Find the view type index. / 2015-10-18 / Wethospu
	var viewType = getSetting('searchView');
	var amount = $('#search-view option').length;
	for (var i = 0; i < amount; i++) {
		if (viewType == $('#search-view option').eq(i).val()) {
			viewType = i + 1;
			break;
		}		
	}
	// Store them to the address bar. / 2015-10-18 / Wethospu
	setHash($("#search-name").val().replace(/\ /g, '+'), 0);
	setHash(storeTagValues(dungeons, '#search-path'), 1);
	setHash(storeTagValues(ranks, '#search-rank'), 2);
	setHash(storeTagValues(races, '#search-race'), 3);
	setHash(tags.join(''), 4);
	setHash('' + viewType, 5);
}

// Converts a list of tags to their corresponding list indexes and encodes it to a string. / 2015-10-18 / Wethospu
function storeTagValues(values, element) {
	var amount = $(element + ' option').length - 1;
	for (var i = 1; i <= amount; i++) {
		var value = $(element + ' option').eq(i).val()
		for (var j = 0; j < values.length; j++) {
			if (values[j] == value)
				values[j] = i;
		}
	}
	var maxValues = [];
	for (var i = 0; i < values.length; i++)
		maxValues.push(amount + 1);
	return storeValuesToString(values, maxValues);
}

// Track current search ID to stop the previous search if user overwrites. / 2015-10-11 / Wethospu
var currentSearchID = 0;

// Attempts to find dungeon, path and rank from parameters. Data must match all of these.
// Rest of the parameters are considered as a partial names. Data must contain at least one parameter.
function doSearch() {
	$("#search-page").html("");
	var names = $("#search-name").val().toLowerCase().split(" ");
	loadSettings(false, false);
	var searchObject = readParameters();
	currentSearchID = currentSearchID + 1;
	searchIndex(currentSearchID, names, searchObject.dungeons, searchObject.ranks, searchObject.races, searchObject.tags, $("#search-amount").val());
	searchDone = true;
}

function readParameters() {
	var tagArray = $("#tag-display").tagsinput('items');
	if (tagArray == null)
		return { dungeons: [], ranks: [], races: [], tags: [] };
	var dungeons = [];
	var races = [];
	var ranks = [];
	var tags = [];
	// Separate tags.
	for (var i = 0; i < tagArray.length; i++) {
		if (tagArray[i].type == "dungeon")
			dungeons = dungeons.concat(tagArray[i].value.split("|"));
		if (tagArray[i].type == "race")
			races.push(tagArray[i].value);
		if (tagArray[i].type == "rank")
		{
			var value = tagArray[i].value;
			// Special ranks.
			if (value == "boss")
			{
				if (ranks.indexOf("champion") == -1)
					ranks.push("champion");
				if (ranks.indexOf("legendary") == -1)
					ranks.push("legendary");
			}
			else if (value == "thrash")
			{
				if (ranks.indexOf("normal") == -1)
					ranks.push("normal");
				if (ranks.indexOf("veteran") == -1)
					ranks.push("veteran");
				if (ranks.indexOf("elite") == -1)
					ranks.push("elite");
			}
			else
				ranks.push(value);
		}
			
		if (tagArray[i].type == "tag")
			tags.push(tagArray[i].value);
	}
	return {
        dungeons: dungeons,
        ranks: ranks,
		races: races,
		tags: tags
    };
}

var currentOutput = '';
// Performance: Takes up to 250 ms.
function searchIndex(searchID, parameters, paths, ranks, races, tags, resultCount) {
	var resultsTop = new Array();
	var resultsHigh = new Array();
	var resultsMedium = new Array();
	var resultsLow = new Array();
	var index = $("<div />");
	$(index).load("enemies/indexfile.htm", function () {
		var lines = $(index).html().split("\n");
		// Filter lines.
		for (var i = 0; i < lines.length; i++)
		{
			// Ignore comments.
			if (lines[i][0] == '<')
				continue;
			// display name|search name|rank|dungeon|path|index
			var elements = lines[i].split("|");
			if (elements.length < 7)
				continue;
			// Check ranks.
			if (ranks.length > 0 && ranks.indexOf(elements[2]) == -1)
				continue;
			// Check race.
			if (races.length > 0 && races.indexOf(elements[3]) == -1)
				continue;
			// Check paths.
			var elementPaths = elements[4].split(":");
			var match = paths.length == 0;
			for (var j = 0; j < elementPaths.length; j++) {
				if (paths.indexOf(elementPaths[j]) > -1) {
					match = true;
					break;
				}
			}
			if (!match)
				continue;
			// Check tags (all must exist!).
			if ($(elements[6].split('')).filter(tags).length != tags.length)
				continue;
			// Check name for relevancy.
			var namesArray = elements[1].split("_");
			var exactMatches = 0;
			var partialMatches = 0;
			for (var j = 0; j < parameters.length; j++) {
				var param = parameters[j];
				for (var k = 0; k < namesArray.length; k++) {
					var name = namesArray[k];
					if (param == name)
					{
						exactMatches++;
						break;
					}
					if (name.indexOf(param) > -1)
					{
						partialMatches++;
						break;
					}
				}
			}
			if (exactMatches == parameters.length && parameters.length == namesArray.length)
				resultsTop.push(lines[i]);
			else if (exactMatches + partialMatches == parameters.length)
				resultsHigh.push(lines[i]);
			else if (exactMatches > 0)
				resultsMedium.push(lines[i]);
			else if (partialMatches > 0)
				resultsLow.push(lines[i]);
			else
				continue;
		}
		var totalSize = resultsTop.length + resultsHigh.length + resultsMedium.length + resultsLow.length;
		// Take only most relevant.
		var results = new Array();
		var size = resultsTop.length;
		if (size > resultCount)
			size = resultCount;
		results.push.apply(results, resultsTop.splice(0, size));
		resultCount -= size;
		if (resultCount > 0)
		{
			size = resultsHigh.length;
			if (size > resultCount)
				size = resultCount;
			results.push.apply(results, resultsHigh.splice(0, size));
			resultCount -= size;
			if (resultCount > 0) {
				size = resultsMedium.length;
				if (size > resultCount)
					size = resultCount;
				results.push.apply(results, resultsMedium.splice(0, size));
				resultCount -= size;
				if (resultCount > 0) {
					size = resultsLow.length;
					if (size > resultCount)
						size = resultCount;
					results.push.apply(results, resultsLow.splice(0, size));
					resultCount -= size;
				}
			}
		}
		results = processResults(results);
		
		if (results.length == 0) {
			$("#search-page").html("Found " + results.length + " results.");
			$("#instructions").css("display", "initial");
		}	
		else
		{	
			var output = 'Found ' + totalSize + ' results.';
			if (results.length != totalSize)
				output += ' Showing ' + results.length + ' results.';
			currentOutput = output;
			if (results.length > 99)
				output += ' Please wait, this may take a while.';
			$("#search-page").html(output);
			$("#instructions").css("display", "none");
			var htmlList = [];
			displayResults(searchID, 0, results, htmlList);
		}
		
	}).error(function (jqXHR, textStatus, errorThrown) {
		console.log("error " + textStatus);
		console.log("incoming Text " + jqXHR.responseText);
	});
}

// Converts a list of index file rows to a better data format. / 2015-08-12 / Wethospu
function processResults(results) {
	var elements = [];
	
	for (var i = 0; i < results.length; i++) {
		var dataArray = results[i].split("|");
		var element = {
			display: dataArray[0],
			rank: dataArray[2],
			index: dataArray[5],
			order: i
		};
		elements.push(element);
	 }
	 elements.sort(function(a,b) {return a.dungeon == b.dungeon ? a.index - b.index : (a.dungeon > b.dungeon ? 1 : -1);} );
	 return elements;
}

// Finds found enemies from content files and displays them.
// Note: Load is asynchonous. This means we have to use recursive callback way instead of a loop.
// Performance: Takes up to 3000 ms if enemy pages not cached. Otherwise up to 500 ms.
function displayResults(searchID, elementID, elements, htmlList) {
	if (currentSearchID != searchID)
		return;
	// Check is this the last call.
	if (elementID >= elements.length) {
		// Build the html.
		var html = "";
		for (var i = 0; i < htmlList.length; i++)
			html += htmlList[i];
		// Display them.
		$("#search-page").html(currentOutput);
		$("#search-page").append(html);
		applyEnemySettings("main");
		loadPage();
		return;
	}
	var view = $("#search-view").val();
	var numberToFind = elements[elementID].index;
	var fileNumber = Math.floor(numberToFind / 100);
	numberToFind -= fileNumber * 100;
	var fileDiv = $("<div />");
	$(fileDiv).load('enemies/enemies' + fileNumber + '.htm', function () {	
		// Find enemies.
		var counter = -1;
		$(fileDiv).find(".enemy").each(function () {
			counter++;
			if (counter != numberToFind)
				return;
			// Build enemy link.
			var str = '';
			if (view != "All" && view != "Info")
				str = '<span class="' + elements[elementID].rank + ' enemy-button" data-index="' + elements[elementID].index + '"><h3>' + elements[elementID].display + '</h3></span>\n';
			if (view == "Info") {
				$(this).find("div").remove(":not(.in-line)");
				$(this).find(".enemy-media").remove();
				$(this).find("p").remove("p");
				$(this).find(".enemy-name").html('<span class="' + elements[elementID].rank + ' enemy-button" data-index="' + elements[elementID].index + '">' + elements[elementID].display + '</span>');
			}
			if (view == "All" || view == "Info")	
				str += $(this)[0].outerHTML;
			if (view == "All")	
				str += '<br><br>';
			str += '<hr/>';
			htmlList[elements[elementID].order] = str;
			// Check whether enemy can be found.
			elementID++;
			if (elementID >= elements.length)
				return;
			numberToFind = elements[elementID].index;
			if (fileNumber != Math.floor(numberToFind / 100))
				return;
			numberToFind -= fileNumber * 100;
		});
		displayResults(searchID, elementID, elements, htmlList);
	}).error(function (jqXHR, textStatus, errorThrown) {
		console.log("error " + textStatus);
		console.log("incoming Text " + jqXHR.responseText);
	});
}

</script>
<br>
<label for="search-name">Name</label>
<input id="search-name" type="text">
<button type="button" onclick="doSearch()">Search</button>
<br><br>
<label for="tag-display">Active filters</label>
<select multiple id="tag-display" readonly>
</select>
<br>
<ul class="list-inline">
	<li>
		<select id="search-path" class="search-changer form-control" data-type="dungeon">
			<option value ="">Instance</option>
ID_PATHS
		</select>
	</li>
	<li>
		<select id="search-rank" class="search-changer form-control" data-type="rank">
			<option value ="">Rank</option>
ID_RANKS
		</select>
	</li>
	<li>
		<select id="search-race" class="search-changer form-control" data-type="race">
			<option value ="">Race</option>
ID_RACES
		</select>
	</li>
	<li>
		<select id="search-tag" class="search-changer form-control" data-type="tag">
			<option value ="">Tag</option>
ID_TAGS
		</select>
	</li>
	<li>
		<select id="search-effect-tag" class="search-changer form-control" data-type="tag">
			<option value ="">Effect tag</option>
ID_EFFECT_TAGS
		</select>
	</li>
</ul>
<br>
<ul class="list-inline">
	<li>
		<label for="search-view">Display</label>
		<select id="search-view" class="form-control">
			<option value="Name">Only name</option>
			<option value="Info">Some information</option>
			<option value="All">Everything</option>
		</select>
	</li>
	<li>
		<label for="search-amount">Results</label>
		<select id="search-amount" class="form-control">
			<option value="10000">Unlimited</option>
			<option value="100">100</option>
			<option value="10">10</option>
		</select>
	</li>
</ul>

<div id="search-page"></div>
<div id="instructions">
	<p>Filter results by selecting options from dropdowns. Active filters are displayed on "Filters". You can remove filters by clicking on the "x" button on them.</p>
	<p>Different type of filters are colored differently. Green is for dungeons, red is for ranks, orange is for races and blue is for both tags.</p>
	<p>Tag and effect tag filters are exclusive. Enemies must match all active tags. Dungeon, rank and race are inclusive. If multiple same type is active enemies must match only one of them.</p>
	<p>You can change amount of displayed information and results by changing view and results dropdowns. Amount of results automatically changes when you change amount of displayed information based on your previous selection.</p>
</div>
